View Caching:

    მაგალითად გვაქ ფეიჯი რომელიც წამდაუწუმ არ იცველება, ამ დროს შეგვიძლია გამოვიყენოთ
    მთლიანი ვიუს ქეშირება.

    ამ კოდში ჩვენ დავქეშეთ ვიუ რომელშიც არის პროდუქტები რომლებიც იცვლებიან ყოველ 24საათში
    ასერომ შეგვიძლია ეს ვიუ დავქეშოთ 24საათი
    from django.views.decorators.cache import cache_page

    @cache_page(60 * 60 * 24)  # Cache for 24 hours
    def homepage(request):
        products = Product.objects.filter(featured=True)[:10]
        return render(request, 'homepage.html', {'products': products})

    მოკლედ ვიუ ქეშინგს გამოვიყენებთ მაშინ, როდესაც გვაქ ფეიჯი რომელიც არ იცვლება ხშირად
    ძირითადად ამისთვის გამოვიყენებთ.

Template Fragment Caching

    ვიყენებთ მაშინ როდესაც გვინდა რომ დავქეშოთ ფეიჯის რომელიმე ფრაგმენტი

    ამ კოდში დავქეშეთ ბლოგ ვებსაიტის საიდბარი სადაც არის პოპულარული არტიკლები.
    მოკლედ მსგავსი რაღაცებისთვის გამოვიყენებთ Template Fragment Caching.
    {% load cache %}
    ეს 600 აღნიშნავს წამს ანუ 10 წუთი დავქეშეთ
    {% cache 600 popular_articles %}
    <div id="sidebar">
        <h3>Popular Articles</h3>
        <ul>
            {% for article in popular_articles %}
                <li><a href="{{ article.get_absolute_url }}">{{ article.title }}</a></li>
            {% endfor %}
        </ul>
    </div>
    {% endcache %}

Cache Invalidation

    გვაქ ვიუ სადაც არის პაგინაცია და როდესაც იუზერი გადავა რომელიმე ფეიჯზე ეს ფეიჯი ავტომატურად დაიქეშება 5 წუთი
    ასევე გვაქ სხვა ვიუც რომელიც არის პასუხისმგებელი დატაბეისის ობიექტის შექმნაზე, როცა იქმნება სხვა ობიექტი
    ჩვენ ვიყენებთ ინვალიდაციას და ვშლით ყველა ქეშს რათა იუზერთან გამოჩნდეს ახალი პროდუქტი ან სხვა რამ.

    class SomeOtherPage(ListView):
    model = Book
    template_name = 'library/some_other.html'
    context_object_name = 'items'
    paginate_by = 30

    def get_queryset(self):
        query = self.request.GET.get('search', '')
        cache_key = f'books_cache_{query}'
        cached_queryset = cache.get(cache_key)

        if cached_queryset is None:
            # Retrieve only the 'title', 'authors', 'id', and 'publisher' fields
            queryset = Book.objects.only('title', 'authors', 'id', 'publisher').order_by('-average_rating')
            if query:
                search_query = SearchQuery(query)
                queryset = queryset.filter(title__search=search_query)

            # Cache the queryset for 10 minutes (600 seconds)
            cache.set(cache_key, list(queryset), timeout=300)
        else:
            queryset = cached_queryset

        return queryset

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        paginator = context['paginator']
        page = context['page_obj']
        index = page.number - 1
        max_index = len(paginator.page_range)
        start_index = index - 2 if index >= 2 else 0
        end_index = index + 3 if index <= max_index - 3 else max_index
        context['page_range'] = paginator.page_range[start_index:end_index]

        # Add the search term to the context
        context['search_term'] = self.request.GET.get('search', '')

        return context

    ქეშის ინვალიდაციას ვაკეთებთ სინგალების დახმარებით

    from django.core.cache import cache
    from django.db.models.signals import post_save, post_delete
    from django.dispatch import receiver
    from .models import Book

    @receiver([post_save, post_delete], sender=Book)
    def invalidate_book_cache(sender, **kwargs):
        cache.delete_pattern('books_cache_*')